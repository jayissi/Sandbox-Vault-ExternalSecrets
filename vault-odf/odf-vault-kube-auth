RH Docs -> https://docs.redhat.com/en/documentation/red_hat_openshift_data_foundation/4.18/html/deploying_openshift_data_foundation_using_amazon_web_services/deploy-using-dynamic-storage-devices-aws#enabling-cluster-wide-encryprtion-with-the-kubernetes-authentication-using-kms_cloud-storage
Pt.1 -> https://developers.redhat.com/articles/2025/06/18/openshift-data-foundation-and-hashicorp-vault-securing-data#deploy_openshift_data_foundation_cluster
Pt.2 -> https://developers.redhat.com/articles/2025/07/15/enhance-data-security-openshift-data-foundation#steps_to_enable_storageclass_encryption

#
# if vault NOT running on OpenShift/Kubernetes - long-lived Token
# ---

oc -n openshift-storage create serviceaccount odf-vault-auth

oc -n openshift-storage create clusterrolebinding vault-tokenreview-binding \
  --clusterrole=system:auth-delegator \
  --serviceaccount=openshift-storage:odf-vault-auth

cat <<EOF | oc create -f -
apiVersion: v1
kind: Secret
metadata:
  name: odf-vault-auth-token
  namespace: openshift-storage
  annotations:
    kubernetes.io/service-account.name: odf-vault-auth
type: kubernetes.io/service-account-token
data: {}
EOF

SA_JWT_TOKEN=$(oc -n openshift-storage get secret odf-vault-auth-token -o jsonpath="{.data['token']}" | base64 --decode; echo)
SA_CA_CRT=$(oc -n openshift-storage get secret odf-vault-auth-token -o jsonpath="{.data['ca\.crt']}" | base64 --decode; echo)

# ---
# if vault NOT running on OpenShift/Kubernetes - long-lived Token
#


OCP_HOST=$(oc config view --minify --flatten -o jsonpath="{.clusters[0].cluster.server}")
ISSUER=$(oc get --raw /.well-known/openid-configuration | jq -r .issuer)
AUDIENCE=$(echo '{"apiVersion":"authentication.k8s.io/v1","kind":"TokenRequest"}' | kubectl create -f- --raw /api/v1/namespaces/default/serviceaccounts/default/token | jq -r '.status.token' | cut -d . -f2 | base64 -d | jq -r '.aud[0]')


#
# https://developer.hashicorp.com/vault/docs/auth/kubernetes#discovering-the-service-account-issuer
#

# ISSUER=$(echo '{"apiVersion": "authentication.k8s.io/v1", "kind": "TokenRequest"}' | kubectl create -f- --raw /api/v1/namespaces/default/serviceaccounts/default/token  | jq -r '.status.token'  | cut -d . -f2 | base64 -d | jq '.iss')
# AUDIENCE=$(echo '{"apiVersion": "authentication.k8s.io/v1", "kind": "TokenRequest"}' | kubectl create -f- --raw /api/v1/namespaces/default/serviceaccounts/default/token | jq -r '.spec.audiences' | jq -r .[0])
# AUDIENCE=$(echo '{"apiVersion": "authentication.k8s.io/v1", "kind": "TokenRequest"}' \
#  | kubectl create -f- --raw /api/v1/namespaces/default/serviceaccounts/default/token \
#  | jq -r '.status.token' \
#  | cut -d . -f2 \
#  | base64 -d \
#  | jq '.aud')



oc exec -n vault -ti vault-0 -- vault auth enable kubernetes



#
# if vault NOT running on OpenShift/Kubernetes - long-lived Token
# ---

oc exec -n vault -ti vault-0 -- \
  vault write auth/kubernetes/config \
    disable_local_ca_jwt=true \
    token_reviewer_jwt="$SA_JWT_TOKEN" \
    kubernetes_host="$OCP_HOST" \
    kubernetes_ca_cert="$SA_CA_CRT" \
    issuer="$ISSUER" \
    token_audience="$AUDIENCE"

# ---
# if vault NOT running on OpenShift/Kubernetes - long-lived Token
#


oc exec -n vault -ti vault-0 -- \
  vault write auth/kubernetes/config \
    kubernetes_host="$OCP_HOST" \
    issuer="$ISSUER" \
    token_audience="$AUDIENCE"


oc exec -n vault -ti vault-0 -- vault secrets enable -path=odf kv-v2


oc -n vault exec -i pods/vault-0 -- vault policy write odf - <<EOF
path "odf/*" {
  capabilities = ["create", "read", "update", "delete", "list"]
}
path "sys/mounts" {
  capabilities = ["read"]
}
EOF


oc exec -n vault -ti vault-0 -- \
    vault write auth/kubernetes/role/odf-rook-ceph-op \
      bound_service_account_names=rook-ceph-system,rook-ceph-osd,noobaa \
      bound_service_account_namespaces=openshift-storage \
      policies=odf \
      ttl=1440h \
      audience="$AUDIENCE"

oc exec -n vault -ti vault-0 -- \
    vault write auth/kubernetes/role/odf-rook-ceph-osd \
      bound_service_account_names=rook-ceph-osd \
      bound_service_account_namespaces=openshift-storage \
      policies=odf \
      ttl=1440h \
      audience="$AUDIENCE"

oc exec -n vault -ti vault-0 -- \
    vault write auth/kubernetes/role/csi-kubernetes \
      bound_service_account_names=ceph-csi-vault-sa \
      bound_service_account_namespaces='*' \
      policies=odf \
      ttl=1440h \
      audience="$AUDIENCE"


<Deploy ODF>

#<PER NameSpace>
#
#cat <<EOF | oc apply -f -
#kind: ConfigMap
#apiVersion: v1
#metadata:
#  name: csi-kms-connection-details
#  namespace: default
#data:
#  vault-tenant-sa: |-
#    {
#      "encryptionKMSType": "vaulttenantsa",
#      "vaultAddress": "http://vault.vault.svc.cluster.local:8200",
#      "vaultTLSServerName": "",
#      "vaultAuthPath": "kubernetes",
#      "vaultBackendPath": "odf",
#      "tenantSAName": "ceph-csi-vault-sa"
#    }
#EOF

---
apiVersion: authorization.openshift.io/v1
kind: Role
metadata:
  name: view-csi-kms-connection-details
  namespace: openshift-storage
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  resourceNames:
  - csi-kms-connection-details
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: view-csi-kms-connection-details
  namespace: openshift-storage
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: view-csi-kms-connection-details
  namespace: openshift-storage
subjects:
  - kind: ServiceAccount
    name: ceph-csi-vault-sa
#    namespace: '*'

oc create sa ceph-csi-vault-sa -n $NS


#oc adm policy add-role-to-user system:auth-delegator system:serviceaccount:*:ceph-csi-vault-sa


##kind: RoleBinding
#kind: ClusterRoleBinding
#apiVersion: authorization.openshift.io/v1
#metadata:
#  name: 'system:auth-delegator'
##  namespace: test
#userNames:
#  - 'system:serviceaccount:*:ceph-csi-vault-sa'
#subjects:
#  - kind: SystemUser
#    name: 'system:serviceaccount:*:ceph-csi-vault-sa'
#roleRef:
#  name: 'system:auth-delegator'

#---
#apiVersion: rbac.authorization.k8s.io/v1
#kind: RoleBinding
##kind: ClusterRoleBinding
#metadata:
#  name: ceph-csi-vault-sa
#  namespace: test
#roleRef:
#  apiGroup: rbac.authorization.k8s.io
#  kind: ClusterRole
#  name: 'system:auth-delegator'
#subjects:
#  - kind: ServiceAccount
#    name: ceph-csi-vault-sa
#    namespace: '*'
#
